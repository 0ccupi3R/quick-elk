input {
  stdin{}
}
filter {
  csv {
  # for newer data.  ##columns => [gameid,qtr,min,sec,off,def,down,togo,ydline,scorediff,series1stdn,description,scorechange,nextscore,teamwin,offscore,defscore,season]
  columns => [gameid,qtr,min,sec,off,def,down,togo,ydline,description,offscore,defscore,season]
  }
  grok {
    match => {
      "gameid" => "%{YEAR:year}%{MONTHNUM:month}%{MONTHDAY:day}_%{GREEDYDATA:teams}"
    }
  }
  grok {
    match => {
      "teams" => "%{WORD:away}@%{WORD:home}"
    }
  }
  mutate {
    gsub => [
      "teams", "@", " at "
    ]
  }
  # now we need to convert known types from Strings to their actual type
  mutate {
    convert => {
      "qtr" => "integer"
      "min" => "integer"
      "sec" => "integer"
      "down" => "integer"
      "togo" => "integer"
      "ydline" => "integer"
      "scorediff" => "integer"
      "scorechange" => "integer"
      "nextscore" => "integer"
      "teamwin" => "integer"
      "offscore" => "integer"
      "defscore" => "integer"
      "season" => "integer"
      "month" => "string"
      "day" => "string"
      "year" => "integer"
    }
  }
  mutate {
    add_field => { "game_date" => "%{year}%{month}%{day}" }
  }
  date { match => [ "game_date", "YYYYMMdd" ]}
  grok {
    match => {
      "description" => "\(%{DATA:clock_time}\)%{GREEDYDATA:playcall}"
    }
  }
  #cleanup mutator
  mutate {
    remove_field => [message, gameid, host, path]
  }
}
output {
  stdout {
    # default is plain, this give full structured view of event
    codec => dots
  }
  elasticsearch {
    protocol => http
    host => "localhost"
    index => "nfl"
  }
}

